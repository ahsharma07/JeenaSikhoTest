# Copyright (c) 2013, Frappe Technologies Pvt. Ltd. and contributors
# For license information, please see license.txt
from __future__ import unicode_literals
import frappe
from frappe import _
import datetime
from datetime import time
def execute(filters):
	columns, data = [], []
	columns = get_columns()
	data = get_data(filters)
	chart = get_chart_data(data)
	return columns ,data,None,chart
def get_columns():
	return [
		{"label": _("Employee"), "fieldname": "employee", "fieldtype": "Link", "options":"Employee","width": 140},
		{"label":_("Employee-Name"),"fieldname":"employeename","fieldtype":"string","width":200},
		{"label": _("Date"), "fieldname": "date", "fieldtype":"Date","width": 100},
		{"label": _("Month"), "fieldname": "month","fieldtype":"Data","width": 200},
		{"label": _("Shift"), "fieldname": "shift","fieldtype":"Data", "width": 100},
		{"label": _("In-Time"), "fieldname": "in_time", "fieldtype": "Time",  "width": 100},
		{"label": _("Out-Time"), "fieldname": "out_time", "fieldtype": "Time", "width": 120},
		{"label": _("Total-Hrs"), "fieldname": "hrs", "width": 100},
		{"label": _("Status"), "fieldname": "status",  "width": 100},
		]
def get_data(filters):
	emp_code=frappe.get_value("User",frappe.session.user,"username")
	dat =[]
	u_dat=[]
	all_data=frappe.db.sql('''SELECT employee as employee,employee_name as employeename,CAST(time as date) as date,MIN(CAST(time as time)) as in_time,
				log_type as log_type,shift as shift,max(CAST(time as time)) as out_time,monthname(time) as month
				 FROM `tabEmployee Checkin` where employee = %(emp_code)s and monthname(time)=%(month)s 
			        GROUP BY CAST(time as date),employee''',{"emp_code":emp_code,"month":filters.get('month')},as_dict=1 )
#	frappe.msgprint(str(all_data))	
	for data in all_data:
		dat.append(data['date'])
		u_dat = list(set(dat))
		attendance_data=frappe.db.sql(''' SELECT employee as employee ,employee_name as employee_name,attendance_date as date,status as status
					FROM `tabAttendance` where employee = %s and attendance_date = %s and docstatus = 1''',(data["employee"],data["date"]),
						as_dict=1)
		if attendance_data :
			data['status'] = attendance_data[0]['status']
		if data['in_time'] == data['out_time']:
			data['hrs']=0
			if data['log_type'] =='IN':
				data['out_time']="NaN"
			elif data['log_type']=='OUT':
				data['in_time']="NaN"
		else :
			data['hrs'] = data['out_time'] - data['in_time']
	att_dat = frappe.db.sql(''' SELECT employee as employee,employee_name as employeename,attendance_date as date,status as status,monthname(attendance_date) as month
				FROM `tabAttendance` where employee =  %(emp_code)s and monthname(attendance_date)=%(month)s and docstatus = 1 ''',
				{"emp_code":emp_code,"month":filters.get('month')},as_dict=1)
	lis = []
	dat1=[]
	dat2 =[]
	final_u_list =[]
	for data in att_dat:
		dat1.append(data['date'])
		dat2 = list(set(dat1))
	for data in att_dat:
		if data['date'] not in u_dat:
			lis.append(data)
	da = frappe.db.sql('''select holiday_date as date,monthname(holiday_date) as month from `tabHoliday`
				 where parent="Calendar of 2021" and monthname(holiday_date)=%(month)s ''',
				{"month":filters.get('month')},as_dict=1)
	final_u_list = u_dat+dat2
	l=[]
	l1=[]
	l3=[]
	empty=[]
	for data in da:
		if data['date'] not in final_u_list:
			data.update({"employee":all_data[0]["employee"],"employeename":all_data[0]["employeename"],"status":"Paid Holiday"})
			l.append(data)
			final_list = all_data+lis+l
		if data['date'] in final_u_list:
			for j in all_data: 
				for  i in att_dat:
					p = data['date']
					frappe.msgprint(str(p))
#					z=all_data.index(filter(lambda n: n.get('date') =='p' ,all_data)[0])
				#	z=[val for val in all_data if val('date')=='p'][0]
					z=[all_data[int(x)] for x in all_data  if x['date']=='p'][0]
					frappe.msgprint(str(z))
					empty.append(all_data[z])
					if (i['status'] == "Present") and (i['date'] == data['date']):
						data.update({"employee":all_data[0]["employee"],"employeename":all_data[0]["employeename"],"status":"Present Paid Holiday","in_time":empty[0]["in_time"],"out_time":empty[0]["out_time"],"hrs":empty["hrs"]})
				#	if (i['status'] == "Absent") and (i['date'] == data['date']):
				#		data.update({"employee":all_data[0]["employee"],"employeename":all_data[0]["employeename"],"status":"Paid Holiday"})
					if (i['status'] != "Present" or i['status']!="Absent") and (j['date'] == data['date']):
						data.update({"employee":all_data[0]["employee"],"employeename":all_data[0]["employeename"],"status":"Paid Holiday","in_time":empty[0]["in_time"],"out_time":empty[0]["out_time"]})
					#	frappe.msgprint(str(data))
					if (i['status'] == "Absent") and (i['date'] == data['date']):
						data.update({"employee":all_data[0]["employee"],"employeename":all_data[0]["employeename"],"status":"Paid Holiday"})
						frappe.msgprint(str(data))
			l1.append(data)
			l3 = all_data+lis+l1
			#frappe.msgprint(str(l3))
			dates=[]
			l2=[]
			my_list_len=len(l3)
			for i in range(my_list_len-1,-1,-1):
				if l3[i]['date'] not in dates:
					dates.append(l3[i]['date'])
					l2.append(l3[i])
					final_list = l2
#	l4=[]
#	l5=[]
#	l6=[]
#	da1 = frappe.db.sql('''select H.holiday_date as date,monthname(H.holiday_date) as month,E.employee from `tabHoliday` H , `tabEmployee` E
#				where H.parent in ("Week Off Sunday","Week Off Saturday" , "Week Off Friday","Week Off Thursday","Week Off Wednesday",
#					"Week Off Tuesday","Week Off Monday") and monthname(H.holiday_date)=%(month)s and E.employee =  %(emp_code)s '',
#				{"month":filters.get('month'),"emp_code":emp_code},as_dict=1)
#	for data in da1:
#		if data['date'] not in u_dat:
#			data.update({"employee":all_data[0]["employee"],"employeename":all_data[0]["employeename"],"status":"Week off"})
#			l4.append(data)
#			final_list = all_data+lis+l+l4
#		if data['date'] in u_dat:
#			data.update({"employee":all_data[0]["employee"],"employeename":all_data[0]["employeename"],"status":"Present on Week off","in_time":all_data[0]["in_time"],"out_time":all_data[0]["out_time"],"hrs":all_data[0]["hrs"]})
#			l5.append(data)
#			l6 = all_dataa_lis+l2+l5
#			dates1=[]
#			l7=[]
#			my_list_len1=len(l6)
#			for i in range(my_list_len1-1,-1,-1):
#				if l6[i]['date'] not in dates1:
##					dates.append(l6[i]['date'])
#					l7.append(l6[i])
#			final_list = l7
	return final_list
def get_chart_data(att_dat):
	present =[]
	absent =[]
	on_leave = []
	half_day =[]
	employee =[]
	status = []
#	frappe.msgprint(str(all_data))
	for i in att_dat:
#		frappe.msgprint(str(i))
#		employee.append(i['employee'])
		try :
			if i['status'] == 'Present':
				present.append(i['status'])
			elif i['status'] == 'On Leave':
				on_leave.append(i['status'])
			elif i['status'] == 'Absent':
				absent.append(i['status'])
			elif i['status'] == 'Half Day':
				half_day.append(i['status'])
			status.append(i['status'])
		except :
			pass
##	frappe.msgprint(str(status))
	chart = {
		"data": {
			'labels':['Present','On Leave','Absent','Half day'],
			'datasets':[
##				{"name" : "Present",'values': len(present)},
				{"values": [len(present),len(on_leave),len(absent),len(half_day)]}
#				{"name" : "Absent",'values': len(absent)},
#				{"name" : "Half day",'values':len(half_day)}
				]
		}
	}
	chart["type"] = "bar"
#	chart[0]["colors"] = ["#6495ED"]
#	chart[1]["colors"]=["#FF0000","#FF7F00","#D2691E"]
#	data = {
#		"labels": ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"],
#		"datasets": [
#				{"values": [18, 40, 30, 35, 8, 52, 17, -4] }
#			]
#		}
	return chart
