# Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
# License: GNU General Public License v3. See license.txt

# For license information, please see license.txt

from __future__ import unicode_literals
from frappe.model.document import Document
import frappe
from frappe import _
from frappe.utils import comma_and, validate_email_address,today

sender_field = "email_id"

class DuplicationError(frappe.ValidationError): pass

class JobApplicant(Document):
	def onload(self):
		job_offer = frappe.get_all("Job Offer", filters={"job_applicant": self.name})
		if job_offer:
			self.get("__onload").job_offer = job_offer[0].name

	def autoname(self):
		keys = filter(None, (self.applicant_name, self.email_id, self.job_title))
		if not keys:
			frappe.throw(_("Name or Email is mandatory"), frappe.NameError)
		self.name = " - ".join(keys)

	def validate(self):
		self.check_email_id_is_unique()
		if self.email_id:
			validate_email_address(self.email_id, True)

		if not self.applicant_name and self.email_id:
			guess = self.email_id.split('@')[0]
			self.applicant_name = ' '.join([p.capitalize() for p in guess.split('.')])

	def check_email_id_is_unique(self):
		if self.email_id:
			names = frappe.db.sql_list("""select name from `tabJob Applicant`
				where email_id=%s and name!=%s and job_title=%s""", (self.email_id, self.name, self.job_title))

			if names:
				frappe.throw(_("Email Address must be unique, already exists for {0}").format(comma_and(names)), frappe.DuplicateEntryError)

	def get_employee_skill(self):
		self.set('employee_skill_map', [])
#               parameters = get_template_details(self.quality_inspection_template)
		parameters = frappe.get_all('Appraisal Goal', fields=["kra",'per_weightage','score','score_earned'],
                                filters={'parenttype': 'Interview', 'parent': self.interview}, order_by="idx")
		for d in parameters:
			child = self.append('employee_skill_map', {})
			child.skill = d.kra
			child.per_weightage = d.per_weightage
			child.score = d.score
			child.score_earned = d.score_earned

	def get_employee_skill_map(self):
                self.set('emplyee_skill_match', [])
#               parameters = get_template_details(self.quality_inspection_template)
                parameters = frappe.get_all('Employee Skill', fields=["skill"],
                                filters={'parenttype': 'Interview', 'parent': self.interview2}, order_by="idx")
                for d in parameters:
                        child = self.append('emplyee_skill_match', {})
                        child.skill = d.skill
                        child.evaluation_date=today()

@frappe.whitelist() 
def aadhar_check(aadhar): 
	if aadhar:
		employee = frappe.db.sql_list("""select name from `tabEmployee`
                                where aadhar_card_number=%s """, (aadhar))
	return employee
